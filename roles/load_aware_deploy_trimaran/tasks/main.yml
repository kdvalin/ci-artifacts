- name: Configure user application monitoring
  command:
    oc apply -f {{ user_applications_monitor_config }}

- name: Ensure user monitoring enabled
  shell:
    set -o pipefail;

    oc -n openshift-user-workload-monitoring get pod
      | awk 'NR > 1 { print $3}'
  register: monitoring_enabled
  delay: 3
  retries: 20
  # until all of the pods are in the running state
  until: "'Completed' not in monitoring_enabled.stdout and 'Failed' not in monitoring_enabled.stdout and 'Pending' not in monitoring_enabled.stdout"

- name: Get monitoring secret name
  shell:
    oc get secret -n openshift-user-workload-monitoring
      | grep  prometheus-user-workload-token
      | head -n 1
      | awk '{print $1 }'
  register: monitoring_secret
  delay: 3
  retries: 20
  until: "'prometheus-user-workload-token' in monitoring_secret.stdout"

- name: Get Thanos Endpoint
  shell:
    oc get route thanos-querier -n openshift-monitoring -o json
      | jq -r '.spec.host'
  register: thanos_endpoint

- name: Checking monitoring token size
  shell:
    set -o errexit;
    set -o pipefail;
    set -o nounset;
    set -o errtrace;

    oc get secret {{ monitoring_secret.stdout }} -n openshift-user-workload-monitoring -o json
      | jq -r '.data.token'
      | base64 -d
      | wc -c
  register: token_size
  delay: 2
  retries: 30
  until: token_size.stdout | int > 1000 

- name: Deploy Trimaran scheduler
  shell: | 
    set -o errexit;
    set -o pipefail;
    set -o nounset;
    set -o errtrace;
   
    export THANOS_MONITORING_ENDPOINT={{ thanos_endpoint.stdout }}
    export MONITORING_SECRET={{ monitoring_secret.stdout }}
    export MONITORING_TOKEN=$(echo $(oc get secret $MONITORING_SECRET -n openshift-user-workload-monitoring -o json | jq -r '.data.token') | base64 -d)
    cat {{ trimaran_setup_config }} | envsubst | oc apply -f -

  register: deploy_trimaran

- name: Ensure Trimaran is Running
  shell:
    oc get pods -n trimaran | awk 'NR > 1 {print $3}'
  register: trimaran_running
  delay: 3
  retries: 20
  until: "trimaran_running.stdout == 'Running'"

- name: Deploy test pod with Trimaran
  shell:
    oc apply -f {{ trimaran_test_pod }} -n trimaran

- name: Ensure the Trimaran test pods completes
  shell:
    oc get pod trimaran-test -n trimaran
      | awk 'NR > 1 {print $3}'
  register: trimaran_test_pod_state
  delay: 5
  retries: 20
  until: trimaran_test_pod_state.stdout == 'Completed'
