---
- name: Check if the namespace exists
  command:
    oc get namespace "{{ pipelines_deploy_application_namespace }}" -oname
  failed_when: false
  register: namespace_exists

- name: Create the namespace, if it does not exist
  command:
    oc new-project "{{ pipelines_deploy_application_namespace }}" --skip-config-write
  when: namespace_exists.rc != 0

- name: Create the src artifacts directory
  file:
    path: "{{ artifact_extra_logs_dir }}/src/"
    state: directory
    mode: '0755'

- name: Deploy the Minio server
  include_role:
    name: cluster_deploy_minio_s3_server
  vars:
    cluster_deploy_minio_s3_server_namespace: "{{ pipelines_deploy_application_namespace }}"
    cluster_deploy_minio_s3_server_secret_properties_file: "{{ pipelines_deploy_application_secret_properties_file }}"
    cluster_deploy_minio_s3_server_bucket_name: "{{ pipelines_deploy_application_name }}"

- name: Prepare the template file
  template:
    src: "{{ pipelines_deploy_application_app_template }}"
    dest: "{{ artifact_extra_logs_dir }}/src/000_dsp_application.yaml"
    mode: 0400

- name: Create the application
  command:
    oc apply -f "{{ artifact_extra_logs_dir }}/src/000_dsp_application.yaml"

- name: Wait for the deployments to be all available
  block:
  - name: Wait for the deployments to be created
    command:
      oc get deploy
         --ignore-not-found
         -lcomponent=data-science-pipelines
         -n {{ pipelines_deploy_application_namespace }}
    register: deployments
    until: deployments.stdout | length > 0
    retries: 30
    delay: 10

  - name: Wait for the deployments to be all available
    shell:
      set -o pipefail;
      oc get deploy
         -o=jsonpath="{range .items[*]}{.metadata.name}{' ='}{.status.unavailableReplicas}{'=\n'}{end}"
         -lcomponent=data-science-pipelines
         -n {{ pipelines_deploy_application_namespace }}
         | grep -v "==" || true
    register: deployments_not_ready
    until: not deployments_not_ready.stdout
    retries: 24
    delay: 10
    failed_when: deployments_not_ready.stdout | length > 0

  always:
  - name: Get the list of the deployments
    shell:
      oc get deploy
         -lcomponent=data-science-pipelines
         -n {{ pipelines_deploy_application_namespace }}
         > "{{ artifact_extra_logs_dir }}/deployments.status"

  - name: Get the list of the pods
    shell:
      oc get pods
        -lcomponent=data-science-pipelines
        -n {{ pipelines_deploy_application_namespace }}
        > "{{ artifact_extra_logs_dir }}/pods.status"

  - name: Get the yaml of the pods
    shell:
      oc get pods -oyaml
        -lcomponent=data-science-pipelines
        -n {{ pipelines_deploy_application_namespace }}
        > "{{ artifact_extra_logs_dir }}/pods.yaml"

  - name: Get the description of the pods
    shell:
      oc describe pods
        -lcomponent=data-science-pipelines
        -n {{ pipelines_deploy_application_namespace }}
        > "{{ artifact_extra_logs_dir }}/pods.desc"
